/** This file was autogenerated. Follow the steps in src/schema/slack/functions/_scripts/README.md to rebuild **/
import {
  assertEquals,
  assertExists,
  assertNotStrictEquals,
} from "../../../dev_deps.ts";
import { DefineWorkflow } from "../../../workflows/mod.ts";
import { ManifestFunctionSchema } from "../../../manifest/manifest_schema.ts";
import SchemaTypes from "../../schema_types.ts";
import SlackTypes from "../schema_types.ts";
import CanvasFetchPlaceholders from "./canvas_fetch_placeholders.ts";

Deno.test("CanvasFetchPlaceholders generates valid FunctionManifest", () => {
  assertEquals(
    CanvasFetchPlaceholders.definition.callback_id,
    "slack#/functions/canvas_fetch_placeholders",
  );
  const expected: ManifestFunctionSchema = {
    source_file: "",
    title: "Fetch canvas placeholders",
    description: "Fetch all placeholders in a Canvas",
    input_parameters: {
      properties: {
        canvas_id: {
          type: SlackTypes.canvas_id,
          description: "ID of the Canvas template",
          title: "Canvas template ID",
        },
      },
      required: ["canvas_id"],
    },
    output_parameters: {
      properties: {
        placeholders: {
          type: SchemaTypes.array,
          description: "Placeholders",
          title: "Placeholders",
          items: { type: SchemaTypes.object },
        },
      },
      required: ["placeholders"],
    },
  };
  const actual = CanvasFetchPlaceholders.export();

  assertNotStrictEquals(actual, expected);
});

Deno.test("CanvasFetchPlaceholders can be used as a Slack function in a workflow step", () => {
  const testWorkflow = DefineWorkflow({
    callback_id: "test_CanvasFetchPlaceholders_slack_function",
    title: "Test CanvasFetchPlaceholders",
    description: "This is a generated test to test CanvasFetchPlaceholders",
  });
  testWorkflow.addStep(CanvasFetchPlaceholders, { canvas_id: "test" });
  const actual = testWorkflow.steps[0].export();

  assertEquals(
    actual.function_id,
    "slack#/functions/canvas_fetch_placeholders",
  );
  assertEquals(actual.inputs, { canvas_id: "test" });
});

Deno.test("All outputs of Slack function CanvasFetchPlaceholders should exist", () => {
  const testWorkflow = DefineWorkflow({
    callback_id: "test_CanvasFetchPlaceholders_slack_function",
    title: "Test CanvasFetchPlaceholders",
    description: "This is a generated test to test CanvasFetchPlaceholders",
  });
  const step = testWorkflow.addStep(CanvasFetchPlaceholders, {
    canvas_id: "test",
  });
  assertExists(step.outputs.placeholders);
});
